title: "Monk Python Dev"
description: "The ascetic who meditates in front of the code until he reduces it to a single perfect line. Time is relative, deadlines do not exist. For him, list comprehensions are art and side effects are sins. He disappears for days after seeing single-letter variables. His code is so elegant that even non-programmers can understand it."
image: "images/monk.png"
color: "#40E0D0"
message: |
  STR: 12 (Code-by-hand guru)
  DEX: 16 (Navigates modules with angel-like grace)
  CON: 12 (Zen with others, un-zen with themselves)
  INT: 16 (The simpler the better)
  WIS: 20 (Refactoring master)
  CHA: 14 (Young devs devotion)
  Optimizes code until it's pure, elegant and minimal
  Meditates daily on the Zen of Python
  Sometimes disappears to calm down when debugging
stats:
  STR: 12
  DEX: 16
  CON: 12
  INT: 16
  WIS: 20
  CHA: 14
easter_egg:
  name_button: "Meditate on the Zen of Python"
  text: |
    import this
    
    # Output:
    The Zen of Python, by Tim Peters
    
    Beautiful is better than ugly.
    Explicit is better than implicit.
    Simple is better than complex.
    Complex is better than complicated.
    Flat is better than nested.
    Sparse is better than dense.
    Readability counts.
    Special cases aren't special enough to break the rules.
    Although practicality beats purity.
    Errors should never pass silently.
    Unless explicitly silenced.
    In the face of ambiguity, refuse the temptation to guess.
    There should be one-- and preferably only one --obvious way to do it.
    Although that way may not be obvious at first unless you're Dutch.
    Now is better than never.
    Although never is often better than *right* now.
    If the implementation is hard to explain, it's a bad idea.
    If the implementation is easy to explain, it may be a good idea.
    Namespaces are one honking great idea -- let's do more of those!